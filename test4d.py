"""

https://rosettacode.org/wiki/Deconvolution/2D%2B

Working on 4 dimensional example using test data from the
RC task.

Python fft:

https://docs.scipy.org/doc/numpy/reference/routines.fft.html

"""

import numpy
import pprint

h =   [
       [
          [[-4, -7, 1], [-5, -5, -8], [-3, -2, 6], [5, -1, 9]], 
          [[2, -3, -5], [-2, 9, -6], [-1, 3, 4], [1, -6, -8]], 
          [[6, -8, -9], [1, -3, 7], [7, 4, -2], [7, -4, 3]]], 
       [
          [[-7, 4, -9], [-9, -9, 7], [-8, 1, 1], [-7, 2, -3]], 
          [[8, 1, -7], [-1, -2, -3], [-4, 5, 9], [2, 7, -6]], 
          [[1, -9, -3], [7, -6, 8], [3, 5, -1], [-1, 6, -4]]], 
       [
          [[4, -2, -6], [-1, -6, -2], [5, 9, 2], [1, 9, 7]], 
          [[9, -9, 2], [-7, -6, 8], [7, 2, 4], [-2, 3, 5]], 
          [[-8, 6, -5], [-8, 5, 5], [-8, 6, -1], [-1, 2, 6]]]]
f =   [
       [
          [
             [8, 5, 7, -8, -4, 9], 
             [3, 9, 7, -8, 1, 1], 
             [1, 5, -4, 7, -3, -3]], 
          [
             [6, 3, -6, 4, 4, -1], 
             [-4, 2, -7, -1, -4, 4], 
             [3, 4, 1, -1, 7, -5]]], 
       [
          [
             [4, -5, 9, 6, -4, 9], 
             [-4, 2, 5, -5, 6, -3], 
             [-4, -5, 7, 6, -8, -6]], 
          [
             [2, 4, -8, 2, -8, -9], 
             [8, 3, 4, 7, 1, 4], 
             [9, -1, 5, 1, 8, 2]]]]
g =   [
       [
          [
             [-32, -76, -55, -12, 79, -16, -67, 9], 
             [-52, -122, -212, -43, 63, 20, -19, -71], 
             [-43, -118, -105, -22, 8, 27, -37, 43], 
             [26, -46, 68, 7, 118, -102, -2, 111], 
             [12, 25, 61, 51, 47, -11, -4, -9], 
             [5, 24, -16, 84, -58, 51, -24, -27]], 
          [
             [-8, -68, -32, -33, -69, 50, 4, -46], 
             [-24, 46, -68, 8, -91, -3, 38, -47], 
             [-22, -13, 137, 118, -110, -33, 118, 2], 
             [30, -68, -43, -55, -20, 19, -50, 5], 
             [-27, -15, -114, -76, -94, 91, -23, -14], 
             [16, 16, -14, 21, 32, -82, 110, -21]], 
          [
             [60, -46, -121, -138, 3, 124, -53, -76], 
             [6, 75, -6, -250, 170, 74, -97, 40], 
             [73, 63, 51, -83, -1, -87, 152, 13], 
             [82, 52, 61, -70, -94, 139, -175, 58], 
             [21, 121, 48, 11, 127, -10, 14, -43], 
             [10, 17, -92, 41, -56, -27, -23, 31]], 
          [
             [36, -30, -114, 45, 46, -74, -28, 9], 
             [-18, 29, 5, 75, -3, 80, 35, -43], 
             [56, 59, -136, -18, 47, -67, -75, 75], 
             [17, -10, -59, 46, -7, -30, 104, -46], 
             [-7, 70, -52, 16, -2, 36, -62, 22], 
             [21, 16, 0, 1, 56, -66, 41, -15]]], 
       [
          [
             [-72, -11, -98, -53, -84, -9, 5, -72], 
             [-97, -143, -182, -1, -11, -140, -100, -21], 
             [-74, -106, -120, -122, 234, -84, -23, 115], 
             [-37, -124, -44, 111, -51, 133, 129, 64], 
             [-37, -59, -50, -86, 117, 51, 14, -69], 
             [-27, -54, 39, -94, 64, 26, -63, -45]], 
          [
             [22, -1, 24, -109, -108, 205, 45, -108], 
             [-68, -93, 77, -132, -22, 18, 243, -40], 
             [-146, -121, 55, 97, -288, -116, -180, 171], 
             [-77, -170, -35, 241, -388, -263, 44, -185], 
             [19, -16, 290, -41, -6, 203, -50, -2], 
             [22, 0, 189, -52, -3, -12, 136, 99]], 
          [
             [84, -97, -129, -64, -10, 65, -67, -56], 
             [13, -15, 57, -443, 265, 1, -211, 168], 
             [50, 191, 195, 56, -95, -124, 208, -33], 
             [5, 174, 17, 73, -146, 301, 4, 63], 
             [-77, -34, 116, -8, -71, -140, 108, -91], 
             [-14, -44, 38, -92, -35, -44, -159, 8]], 
          [
             [18, -43, -149, 89, -6, -57, 141, 84], 
             [88, -25, -103, 181, -174, 26, -56, -119], 
             [69, -9, -182, -27, -56, -118, -154, 76], 
             [82, 74, 29, 23, 76, -105, 164, -61], 
             [132, 19, 108, 20, 82, 86, -13, -3], 
             [60, -29, 77, -25, 50, 36, -42, 26]]], 
       [
          [
             [4, 55, -149, -37, -71, -41, 78, -135], 
             [-4, -44, -60, -277, -46, 168, -229, 66], 
             [73, 169, -200, -12, 43, -222, 211, 76], 
             [62, 242, 29, 24, -79, 26, 119, -1], 
             [68, 84, 52, 120, 28, 20, -55, 4], 
             [29, 41, 1, -7, 79, 27, -36, -3]], 
          [
             [114, -83, 61, -105, 141, 104, -38, 42], 
             [-161, -86, -38, -75, 195, -42, -98, -53], 
             [-105, 23, -77, 133, 1, -22, -87, 191], 
             [-150, -58, 125, -24, -71, -99, 281, 18], 
             [-108, 29, -75, 30, -39, 9, -177, -35], 
             [-70, 11, 25, 132, -73, -22, -34, -20]], 
          [
             [10, -26, -167, 97, -154, -160, 69, -11], 
             [-80, -54, 72, 208, -146, 87, -18, 120], 
             [37, 19, 64, 184, 125, -309, 93, -93], 
             [-182, -69, 153, 78, -69, -12, 71, 12], 
             [-10, 31, 177, 114, 104, -89, 43, 21], 
             [15, 40, -27, 139, -10, 53, -42, -31]], 
          [
             [-46, -2, -14, -21, 20, 69, 79, 32], 
             [6, -87, 70, -35, -187, -28, 10, -109], 
             [31, -125, 162, -124, -102, -6, -170, 81], 
             [87, -52, 303, -60, 121, -15, 109, 13], 
             [-1, 63, -17, 43, -54, 84, -31, 11], 
             [-12, 57, -22, 60, -25, 55, 12, -38]]], 
       [
          [
             [16, -28, 22, 36, -82, 8, 6, -54], 
             [-20, -3, 53, -92, -46, 9, -76, 0], 
             [8, 21, 61, 112, -20, -46, 139, 60], 
             [-12, 34, 58, 38, 66, 86, 90, 69], 
             [-24, -95, -23, 137, 24, -74, -55, -33], 
             [-4, -41, -66, 34, 95, -36, -110, -42]], 
          [
             [44, -69, 82, -37, -60, 97, -23, 72], 
             [-34, 45, -40, -182, 151, -57, 9, 60], 
             [58, -61, 20, -49, -153, -97, -69, -38], 
             [25, 143, 47, -145, 205, 33, -130, -74], 
             [33, 92, 120, 183, 133, 111, 54, -7], 
             [17, 78, 10, 23, 121, 99, 16, -16]], 
          [
             [-14, 82, -226, 129, -83, -131, 139, -63], 
             [58, -65, -12, 131, -62, 191, -67, -4], 
             [71, -83, -172, 32, 48, -204, 9, 6], 
             [49, -19, 27, 28, 113, 130, -103, 14], 
             [83, 35, 3, 52, 224, 43, 55, 16], 
             [-14, 26, -9, -14, 74, 51, -14, -26]], 
          [
             [-16, -20, 78, -84, 116, 14, -14, 45], 
             [-80, 2, 40, -83, 48, -19, -66, -65], 
             [-152, 58, 18, -62, 48, 57, -49, 19], 
             [-138, 77, 6, -17, -40, 1, 7, -48], 
             [-80, 75, -5, 42, -26, 71, 18, 22], 
             [-9, 19, 47, 3, 24, 20, 52, 12]]]]
      
def trim_zero_empty(x):
    """
    
    Takes a structure that represents an n dimensional example. 
    For a 2 dimensional example it will be a list of lists.
    For a 3 dimensional one it will be a list of list of lists.
    etc.
    
    Actually these are multidimensional numpy arrays but I was thinking
    in terms of lists.
    
    Returns the same structure without trailing zeros in the inner
    lists and leaves out inner lists with all zeros.
    
    """
    
    if len(x) > 0:
        if type(x[0]) != numpy.ndarray:
            # x is 1d array
            return list(numpy.trim_zeros(x))
        else:
            # x is a multidimentional array
            new_x = []
            for l in x:
               tl = trim_zero_empty(l)
               if len(tl) > 0:
                   new_x.append(tl)
            return new_x
    else:
        # x is empty list
        return x
       
def deconv(a, b):
    """
    
    Returns function c such that b * c = a.
    
    https://en.wikipedia.org/wiki/Deconvolution
    
    """
        
    # Convert larger polynomial using fft

    ffta = numpy.fft.fftn(a)
    
    # Get it's shape so fftn will expand
    # smaller polynomial to fit.
    
    ashape = numpy.shape(a)
    
    # Convert smaller polynomial with fft
    # using the shape of the larger one

    fftb = numpy.fft.fftn(b,ashape)
        
    # Divide the two in frequency domain
    
    fftquotient = ffta / fftb
    
    # Convert back to polynomial coefficients using ifft
    # Should give c but with some small extra components

    c = numpy.fft.ifftn(fftquotient)
    
    # Get rid of imaginary part and round up to 6 decimals
    # to get rid of small real components

    trimmedc = numpy.around(numpy.real(c),decimals=6)
    
    # Trim zeros and eliminate
    # empty rows of coefficients
    
    cleanc = trim_zero_empty(trimmedc)
                
    return cleanc
    
print("deconv(g,h)=")

pprint.pprint(deconv(g,h))

print(" ")

print("deconv(g,f)=")

pprint.pprint(deconv(g,f))